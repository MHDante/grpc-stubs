from collections import abc
from typing import Any, Collection, Iterable, Iterator, List, Tuple, Union


MetadataKey = str
MetadataValue = Union[str, bytes]


class Metadata(abc.Mapping, Collection[Tuple[MetadataKey, MetadataValue]]):
    def __init__(self, *args: Tuple[MetadataKey, MetadataValue]) -> None: ...

    @classmethod
    def from_tuple(cls: Any, raw_metadata: Iterable[Tuple[MetadataKey, MetadataValue]]) -> Any: ...

    def add(self, key: MetadataKey, value: MetadataValue) -> None: ...

    def __len__(self) -> int: ...

    def __getitem__(self, key: MetadataKey) -> MetadataValue: ...

    def __setitem__(self, key: MetadataKey, value: MetadataValue) -> None: ...

    def __delitem__(self, key: MetadataKey) -> None: ...

    def delete_all(self, key: MetadataKey) -> None: ...

    def __iter__(self) -> Iterator[Tuple[MetadataKey, MetadataValue]]: ...

    def get_all(self, key: MetadataKey) -> List[MetadataValue]: ...

    def set_all(self, key: MetadataKey, values: List[MetadataValue]) -> None: ...

    def __contains__(self, key: object) -> bool: ...

    def __eq__(self, other: Any) -> bool: ...

    def __add__(self, other: Any) -> Metadata: ...
